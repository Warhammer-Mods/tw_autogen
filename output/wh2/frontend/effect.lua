--- THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT MANUALLY.

---@class effect
local effect = {}

--- Potentially adds the supplied ancillary to the character in the supplied context. When called, the function generates a random number between 0-100, and if this number is less than or equal to the supplied chance value, then the ancillary is added. The character to add the ancillary to is specified in the supplied context object, which must be a context object created by a character event (e.g. CharacterCompletedBattle, CharacterCreated).<br />
--- This function is somewhat archaic and should only be used in exported ancillary scripts. For general script usage force_add_ancillary is greatly preferred.
---@param ancillary_key string #Ancillary key, from the ancillaries table.
---@param chance number #Percentage chance that the ancillary will actually be added.
---@param context userdata #Context object, provided by a character event.
function effect.ancillary(ancillary_key, chance, context) end

--- Potentially adds the supplied trait points to the trait-recipient in the supplied context. When called, the function generates a random number between 0-100, and if this number is less than or equal to the supplied chance value then the trait points are added. The trait recipient is specified in the supplied context object, and the type of recipient must also be specified by a supplied string.<br />
--- This function is somewhat archaic and should only be used in exported trait scripts. For adding traits to characters in general scripts force_add_trait is greatly preferred.
---@param trait_key string #Trait key, from the traits table.
---@param applicable_to string #Specifies the type of object to apply the trait to. Valid strings here are agent (for all characters), region and unit. Not all recipient types may currently be supported.
---@param points number #Number of trait points to add, if successful.
---@param chance number #Percentage chance that the trait will actually be added.
---@param context userdata #Context object, provided by an event.
function effect.trait(trait_key, applicable_to, points, chance, context) end

--- Opens the in-game web browser with the supplied encyclopedia url.
---@param encyclopedia_url string #encyclopedia url
---@param context userdata #Context object, provided by an event.
function effect.OpenBrowser(encyclopedia_url, context) end

--- Prevents advice from being triggered with effect.advance_contextual_advice_thread. This can be useful for tutorials, but is not used by modern advice systems.
---@param should_suspend boolean #should suspend
function effect.suspend_contextual_advice(should_suspend) end

--- Directs the advisor to display the supplied advice string. This should only be used for debugging since localisation is bypassed.
---@param text string #text
function effect.advice(text) end

--- Directs the advisor to advance the specified thread by the supplied score increase. If any advice on that thread subsequently becomes eligible to be issued, then that advice is issued.
---@param advice_key string #Advice key, from the advice_threads table.
---@param score_increase number #Score to increase the advice thread by.
function effect.advance_scripted_advice_thread(advice_key, score_increase) end

--- 
---@param advice_key string #Advice key, from the advice_threads table.
---@param score_increase number #Score to increase the advice thread by.
---@param x number #X display co-ordinate to associate the advice with.
---@param y number #Y display co-ordinate to associate the advice with.
function effect.advance_scripted_advice_thread_located(advice_key, score_increase, x, y) end

--- Returns the advice thread score. This can indicate whether advice on this thread has already been played.
---@param thread_key string #Advice thread key, from the advice_threads table.
---@return number #score 
function effect.get_advice_thread_score(thread_key) end

--- Increments the advice thread score by the supplied amount, without playing any advice.
---@param thread_key string #Advice thread key, from the advice_threads table.
---@param score number #score
function effect.increment_advice_thread_score(thread_key, score) end

--- Stores a key in the advice history, which can subsequently be tested with effect.get_advice_history_string_seen. This allows scripts to test whether the player has ever encountered certain conditions in their playing history (e.g. "has ever started game"). The flag will be reset if the player resets their advice history.
---@param key string #key
function effect.set_advice_history_string_seen(key) end

--- Returns whether a key has ever been set in the advice history with effect.set_advice_history_string_seen.
---@param key string #key
---@return boolean #has been set 
function effect.get_advice_history_string_seen(key) end

--- Returns the current advice level setting. The following table indicates potential returned values:<br />
--- Returned ValueAdvice Level<br />
--- 0Minimal
--- 1Low
--- 2High
---@return number #advice level 
function effect.get_advice_level() end

--- Clears out the advice session history. This is the list of advice shown in this particular game session, accessed by the next/previous buttons on the advisor panel.
function effect.clear_advice_session_history() end

--- Directs the advisor to consider issuing advice on the supplied advice thread. The supplied number of points are added to the thread - if a record from the advice_levels table subsequently becomes eligible to be issued, then that advice is issued.
---@param advice_thread string #Advice thread key.
---@param points number #Points to add to thread.
---@param context userdata #context object supplied by game event.
function effect.advance_contextual_advice_thread(advice_thread, points, context) end

--- Returns whether audio for any advice is currently playing.
---@return boolean #advice is playing 
function effect.is_advice_audio_playing() end

--- Triggers a keyboard shortcut event. Valid shortcut events are defined in data\text\default_keys.xml.
---@param shortcut_name string #shortcut name
function effect.trigger_shortcut(shortcut_name) end

--- Simulates a key down followed by a key up key event. Valid key events are listed here: Simulating Keyboard Events
---@param event string #event
function effect.key_press(event) end

--- Triggers a key down key event. Note that the game will think the key is held down until a key up event is received. Valid key events are listed here: Simulating Keyboard Events
---@param event string #event
function effect.key_down(event) end

--- Triggers a key up event. Valid key events are listed here: Simulating Keyboard Events.
---@param event string #event
function effect.key_up(event) end

--- Triggers a mouse event at a specified position. Valid mouse events are listed in the cursor_mouse_events table.
---@param event string #event
---@param screen_pos_x number #screen pos x
---@param screen_pos_y number #screen pos y
function effect.mouse_event(event, screen_pos_x, screen_pos_y) end

--- Returns whether the specified boolean user preference setting is true or not.
---@param preference_key string #preference key
---@return boolean #preference value 
function effect.pref_as_bool(preference_key) end

--- Returns the numeric value of the specified floating point user preference. Floating point number values will be marked with &lt;float&gt; in the preferences file.
---@param preference_key string #preference key
---@return number #preference value 
function effect.pref_as_float(preference_key) end

--- Returns the numeric value of the specified integer user preference. Integer values will be marked with &lt;int&gt; in the preferences file.
---@param preference_key string #preference key
---@return number #preference value 
function effect.pref_as_integer(preference_key) end

--- Returns the value of the specified tweaker as a string. Tweakers are game settings that may be easily set and changed during development, through methods such as startup scripts or the game console.
---@param tweaker_name string #tweaker name
---@return string #tweaker value 
function effect.tweaker_value(tweaker_name) end

--- Returns the game version string.
---@return string #game version 
function effect.game_version() end

--- Performs a VFS lookup in the specified relative path (root is data/) for files matching the supplied pattern. Returns a comma-delimited list of files found.
---@param path string #Path from data/ in which to look.
---@param pattern string #Search pattern.
---@return string #file list 
function effect.filesystem_lookup(path, pattern) end

--- Triggers a screenshot
---@param filename string #filename
function effect.take_screenshot(filename) end

--- Returns the full path to the screenshots directory in appdata.
---@return string #screenshots path 
function effect.get_appdata_screenshots_path() end

--- Returns the icon path for the supplied ping icon type, specified by a numeric index. This allows script to create its own pings that don't go through the ping system (like ping icons attached to units - see <a href="../battle/script_unit.html#function:script_unit:add_ping_icon">script_unit:add_ping_icon). This function works in battle only.
---@param ping_type number #ping type
---@return string #icon path 
function effect.PingIconPath(ping_type) end

--- Retrieves a full image path from the working data folder for a supplied image name that obeys the currently loaded skins. For each loaded skin, the existence of the image is queried and, should it exist, the path to that image is returned. If the image is not found then a path to the image in the default skin folder is returned, although in this case the existence of the image is not checked for. The returned image path can subsequently be supplied to uicomponent:SetImagePath.
---@param image_name string #Image name, excluding path but including file extension.
---@return string #image path 
function effect.get_skinned_image_path(image_name) end

--- Retrieves a localised string from the database by its full localisation key. This is in the form [table]_[field]_[record_key]. If the lookup fails, an empty string is returned.
---@param localisation_key string #localisation key
---@return string #localised string 
function effect.get_localised_string(localisation_key) end

--- Returns whether subtitles are enabled or not in the player's preferences.
---@return boolean #subtitles enabled 
function effect.subtitles_enabled() end

--- Returns whether any movie is currently playing.
---@return boolean #is movie playing 
function effect.is_any_movie_playing() end

--- Stops any currently playing movies.
function effect.stop_all_movies() end

--- Sets a record from the custom_loading_screens table to use for the next loading screen. The record is specified by string key.
---@param key string #key
function effect.set_custom_loading_screen_key(key) end

--- Creates or updates a CcoScriptObject data record within the UI context system with a specified value. UI components and layouts can be separately set up to query these values by name. This allows script to set up and modify values which are then reflected in the UI, giving script great power to set up custom gameplay structures which are visible to the player on the UI. Examples might include health bars, counters, progress meters etc which are tied to arbitrary scripted values.
---@param id string #Context value id.
---@param value number/string #Value to set - this can be a number or a string.
function effect.set_context_value(id, value) end

--- Calls a specified function on a specified context object. The value returned by the function is passed back to script as a boolean. This allows script to query values on objects within the UI context system.
---@param object_id string #Context object id on which to call the function.
---@param function_id string #Function id on the context object to call. This can also be an expression.
---@return boolean #returned value 
function effect.get_context_bool_value(object_id, function_id) end

--- Calls a specified function on a specified context object. The value returned by the function is passed back to script as a number. This allows script to query number values on objects within the UI context system.
---@param object_id string #Context object id on which to call the function.
---@param function_id string #Function id on the context object to call. This can also be an expression.
---@return number #returned value 
function effect.get_context_numeric_value(object_id, function_id) end

--- Calls a specified function on a specified context object. The value returned by the function is passed back to script as a string. This allows script to query string values on objects within the UI context system.
---@param object_id string #Context object id on which to call the function.
---@param function_id string #Function id on the context object to call. This can also be an expression, but the result must return a context id.
---@return string #context object id 
---@return number #x position value 
---@return number #y position value 
---@return number #z position value 
---@return number
function effect.get_context_string_value(object_id, function_id) end

--- Calls a specified function on a specified context object that returns a string name of another context object. This allows script to get a handle to a context object related to the subject context object, such as an army related to a unit.
---@param object_id string #Context object id on which to call the function.
---@param function_id string #Function id on the context object to call. This can also be an expression, but the result must return a context id.
---@return string #context object id 
function effect.get_context_object_id(object_id, function_id) end

--- Calls a specified function on a specified context object that makes changes to the game. This allows script to use the context system to modify the state of the game.
---@param object_id string #Context object id on which to call the function.
---@param function_id string #Function id on the context object to call. This can be expression.
function effect.call_context_command(object_id, function_id) end
