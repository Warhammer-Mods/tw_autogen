--- THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT MANUALLY.

---@class battle_unit
local battle_unit = {}

--- Returns the script name for the unit, if any has been set. A script name for the unit may be set in the battle setup, either in the battle xml or on the appropriate record in the battle_set_piece_armies_units_junctions table if setting up a set-piece/quest battle. It is valid for multiple units in a given army to have the same script name.
---@return string  script name 
function battle_unit:name() end

--- Returns the unique ui id for the unit, which should match the name of the corresponding unit card.
---@return number  ui ud 
function battle_unit:unique_ui_id() end

--- Returns the unit type of the unit, from the land_units table.
---@return string  unit type 
function battle_unit:type() end

--- Returns the index number of the alliance the unit belongs to, allowing its battle_alliance to be determined or looked up from a battle_alliances object.
---@return number  alliance index 
function battle_unit:alliance_index() end

--- Returns the index number of the army the unit belongs to, allowing its battle_army to be determined or looked up from a battle_armies object (which itself can be determined from the value returned by unit:alliance_index).
---@return number  army index 
function battle_unit:army_index() end

--- Returns the class of the unit, from the land_units table.
---@return string  unit class 
function battle_unit:unit_class() end

--- Returns whether the unit is cavalry.
---@return boolean  is cavalry 
function battle_unit:is_cavalry() end

--- Returns whether the unit is infantry.
---@return boolean  is infantry 
function battle_unit:is_infantry() end

--- Returns whether the unit is artillery.
---@return boolean  is artillery 
function battle_unit:is_artillery() end

--- Returns whether the unit is artillery in a limbered state (i.e. it can move but not fire).
---@return boolean  is limbered artillery 
function battle_unit:is_limbered_artillery() end

--- Returns whether this is the commanding unit of the army.
---@return boolean  is commanding 
function battle_unit:is_commanding_unit() end

--- Returns the centre position of the main squad of the unit.
---@return battle_vector  position 
function battle_unit:position() end

--- Returns the position to which the unit has been ordered to move to. Note that if the unit is attacking, as opposed to moving, then this will return the current position of the unit.
---@return battle_vector  ordered position 
function battle_unit:ordered_position() end

--- Returns whether the unit can reach the supplied position.
---@param position battle_vector position
---@return boolean  can reach 
function battle_unit:can_reach_position(position) end

--- Returns the current orientation of the main squad of the unit in degrees.
---@return number  orientation 
function battle_unit:bearing() end

--- Returns the orientation of the position to which the unit has been ordered in degrees.
---@return number  orientation 
function battle_unit:ordered_bearing() end

--- Returns the width of the position to which the unit has been ordered in metres.
---@return number  width 
function battle_unit:ordered_width() end

--- Returns the position of the commanding officer of the unit.
---@return battle_vector  officer position 
function battle_unit:position_of_officer() end

--- Returns whether the supplied unit is in missile range of this unit.
---@param target_unit battle_unit target unit
---@return boolean  is in range 
function battle_unit:unit_in_range(target_unit) end

--- Returns the shortest distance in metres between this unit and a supplied unit, taking into account their bounding box rather than just working out the centre-to-centre distance.
---@param target_unit battle_unit target unit
---@return number  shortest distance 
function battle_unit:unit_distance(target_unit) end

--- Returns whether the unit is moving.
---@return boolean  is moving 
function battle_unit:is_moving() end

--- Returns whether the unit is moving fast (running/charging).
---@return boolean  is moving fast 
function battle_unit:is_moving_fast() end

--- Returns whether the unit is currently idle.
---@return boolean  is idle 
function battle_unit:is_idle() end

--- Returns whether the unit is currently leaving the battlefield.
---@return boolean  is leaving battle 
function battle_unit:is_leaving_battle() end

--- Returns whether this unit is currently a valid target for enemies to attack. A unit might be invalid if they are entering or leaving the battlefield, hidden, or dead.
---@return boolean  is valid target 
function battle_unit:is_valid_target() end

--- Returns whether the unit is currently garrisoned in a building.
---@return boolean  is garrisoned 
function battle_unit:is_currently_garrisoned() end

--- Returns whether the unit can fly and is currently flying.
---@return boolean  is flying 
function battle_unit:is_currently_flying() end

--- Returns whether the unit can fly.
---@return boolean  can fly 
function battle_unit:can_fly() end

--- Returns whether the unit is currently on a ship.
---@return boolean  is on a ship 
function battle_unit:has_ships() end

--- Returns whether the unit has a ship but is not currently on it.
---@return boolean  dismounted from ship 
function battle_unit:is_dismounted_ships() end

--- Returns whether the unit is currently hidden in tall grass/trees. Note that this is a separate test from the unit being obscured from the enemy behind hills or other terrain features.
---@return boolean  is hidden 
function battle_unit:is_hidden() end

--- Returns whether the unit is visible to a supplied alliance. This returns the last calculated result of the line-of-sight test that determines whether a unit is obscured from its enemy by terrain features.
---@param alliance battle_alliance alliance
---@return boolean  is visible to alliance 
function battle_unit:is_visible_to_alliance(alliance) end

--- Returns whether the unit is currently taking fire.
---@return boolean  taking fire 
function battle_unit:is_under_missile_attack() end

--- Returns whether the unit is currently in melee combat.
---@return boolean  in melee 
function battle_unit:is_in_melee() end

--- Returns the number of enemy combatants this unit has killed in this battle.
---@return number  number killed 
function battle_unit:number_of_enemies_killed() end

--- Returns the number of soldiers the unit started the battle with.
---@return number  initial unit size 
function battle_unit:initial_number_of_men() end

--- Returns the number of soldiers currently alive in the unit.
---@return number  current unit size 
function battle_unit:number_of_men_alive() end

--- Returns the number of soldiers currently alive in the unit, expressed as a unary fraction of the the initial size of the unit. A returned value of 0.75 would indicate that 25% of the soldiers in the unit that started the battle have died.
---@return number  unary proportion 
function battle_unit:unary_of_men_alive() end

--- Kills a specified number of soldiers in the unit. The optional second argument allows their bodies to be hidden - this is useful if it's desired that the unit 'disappear'.
---@param soldiers_to_kill number soldiers to kill
---@param hide_bodies boolean hide bodies
function battle_unit:kill_number_of_men(soldiers_to_kill, hide_bodies) end

--- Returns the hitpoint strength of all soldiers in the unit, expressed as a unary fraction of the the initial hitpoint strength of the unit. A returned value of 0.75 would indicate that the unit has lost 25% of the hitpoints it started the battle with.
---@return number  unary proportion 
function battle_unit:unary_hitpoints() end

--- Returns whether the morale of the unit is currently wavering.
---@return boolean  is wavering 
function battle_unit:is_wavering() end

--- Returns whether the unit is currently routing.
---@return boolean  is routing 
function battle_unit:is_routing() end

--- Returns whether the unit is currently rampaging.
---@return boolean  is rampaging 
function battle_unit:is_rampaging() end

--- Returns whether the unit is currently shattered (routing without possibility of return).
---@return boolean  is shattered 
function battle_unit:is_shattered() end

--- Returns whether the left flank of the unit is currently threatened by the enemy.
---@return boolean  left flank threatened 
function battle_unit:is_left_flank_threatened() end

--- Returns whether the right flank of the unit is currently threatened by the enemy.
---@return boolean  left right threatened 
function battle_unit:is_right_flank_threatened() end

--- Returns whether the rear of the unit is currently threatened by the enemy.
---@return boolean  rear threatened 
function battle_unit:is_rear_flank_threatened() end

--- Returns the fatigue state of the unit as a string. Possible values are threshold_fresh, threshold_active, threshold_winded, threshold_tired, threshold_very_tired and threshold_exhausted.
---@return string  fatigue state 
function battle_unit:fatigue_state() end

--- Returns the remaining ammunition count of this unit.
---@return number  current ammunition 
function battle_unit:ammo_left() end

--- Returns the amount of ammunition the unit started the battle with.
---@return number  starting ammunition 
function battle_unit:starting_ammo() end

--- Sets the current ammunition level of the unit to the supplied unary value. Setting a value of 0 would mean the unit would have no ammunition, whereas setting a value of 1 would mean the unit would have the amount of ammunition they started the battle with. It is permitted to set a value greater than 1, but the unit will appear to have full ammunition on the UI until its ammunition level drops back below 100%.
---@param unary_ammunition_level number unary ammunition level
function battle_unit:set_current_ammo_unary(unary_ammunition_level) end

--- Returns the missile range of this unit in metres.
---@return number  missile range 
function battle_unit:missile_range() end

--- Returns whether the unit can perform the specified special ability. Valid special abilities are defined in the special_abilities table.
---@param special_ability_key_ string special ability key 
---@return boolean  can perform ability 
function battle_unit:can_perform_special_ability(special_ability_key_) end

--- Returns whether the unit can use any special abilities that cost magic.
---@return boolean  can use magic 
function battle_unit:can_use_magic() end

--- Returns whether the unit can use a particular behaviour this battle. Valid behaviours are currently as follows: defend, drop_siege_equipment, abandon_artillery_engines, change_formation_spacing, dismantle_artillery_piece, dismount, fire_at_will, skirmish, release_animals, unlimber, board_ship, and formed_attack.
---@param behaviour string behaviour
---@return boolean  behaviour can be used 
function battle_unit:can_use_behaviour(behaviour) end

--- Returns whether a particular behaviour is currently active. Valid behaviours are currently as follows: defend, drop_siege_equipment, abandon_artillery_engines, change_formation_spacing, dismantle_artillery_piece, dismount, fire_at_will, skirmish, release_animals, unlimber, board_ship, and formed_attack.
---@param behaviour string behaviour
---@return boolean  behaviour is active 
function battle_unit:is_behaviour_active(behaviour) end

--- Enables or disables a global attribute on the unit. Attribute keys are listed above, in the Unit Attributes section description.
---@param attribute_key string attribute key
function battle_unit:set_stat_attribute(attribute_key) end

--- Compels the unit to make a charge sound effect.
function battle_unit:trigger_sound_charge() end

--- Compels the unit to make a taunt sound effect.
function battle_unit:trigger_sound_taunt() end

--- Compels the unit leader to play an animation.
---@param animation_key string animation key
---@param loop_animation boolean loop animation
function battle_unit:play_anim_for_captain(animation_key, loop_animation) end

--- Prevents or allows the unit to deploy as a reinforcement. If set to false, and the unit has not yet entered the battlefield, then the unit will not be able to deploy until the function is called again with an argument of true.<br />
--- Calling this command has no effect if the unit is not part of a reinforcement army.
---@param can_deploy boolean can deploy
function battle_unit:deploy_reinforcement(can_deploy) end

--- Selects the unit in the user interface.
function battle_unit:select_in_ui() end

--- Makes a player unit look like it is allied, rather than part of the controlled army. This is useful for specific scripted situations where it's intended to grant allied units to player control.<br />
--- Call this function with true as a single argument to mark the controlled unit as an ally, and then again supplying false to mark the unit as part of the player's army again.
---@param mark_as_ally boolean mark as ally
function battle_unit:mark_as_ally(mark_as_ally) end
