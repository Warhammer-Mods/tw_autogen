--- THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT MANUALLY.

---@class battle_army
local battle_army = {}

--- Creates and returns a battle_units object listing all units in the army.
---@return battle_units  units list 
function battle_army:units() end

--- Returns the key of the army's faction, from the factions database table.
---@return string  faction key 
function battle_army:faction_key() end

--- Returns the subculture key of the army's faction, from the cultures_subcultures database table.
---@return string  subculture key 
function battle_army:subculture_key() end

--- Returns the folder path of the flag icons used for the army's faction, from the flags_path field of the factions database table.
---@return string  faction flags folder path 
function battle_army:flag_path() end

--- Returns whether the army's faction is a rebel faction.
---@return boolean  is rebel 
function battle_army:is_rebel() end

--- Creates and returns a battle_unitcontroller object associated with this army. Consider using the generated_battle or script_unit framework, or at least the helper functions documented in the section Unitcontroller Creation rather than calling this directly.
---@return battle_unitcontroller  unitcontroller 
function battle_army:create_unit_controller() end

--- Returns whether the army commander is alive or not.
---@return boolean  is commander alive 
function battle_army:is_commander_alive() end

--- Returns whether the army commander is invicible or not.
---@return boolean  is commander invincible 
function battle_army:is_commander_invincible() end

--- Returns the army handicap, which indicates the difficulty level the battle is being played at. A returned value of 1 equates to easy difficulty, 0 to normal difficulty, -1 to hard difficulty and -2 to very hard difficulty.
---@return number  handicap value 
function battle_army:army_handicap() end

--- Returns the remaining recharge left for an armies magic pool. This is rate of recharge compared to max possible recharge rate. 0 is slowest speed, 1 is quickest.
---@return number  recharge rate 
function battle_army:wind_of_magic_remaining_recharge_rate() end

--- Adds the supplied amount to the winds of magic reserve for the army. 
---@param magic_to_add number magic to add
function battle_army:modify_winds_of_magic_max_depletion(magic_to_add) end

--- Returns a battle_units collection containing reinforcements waiting to deploy. Supply an optional index if there are multiple units collections waiting to reinforce.
---@param reinforcement_collection number reinforcement collection
---@return battle_units  reinforcements units 
function battle_army:get_reinforcement_units(reinforcement_collection) end

--- Return the number of battle_units collections that are reinforcements waiting to deploy for this army.
---@return number  number of reinforcement units collections 
function battle_army:num_reinforcement_units() end

--- Prevents reinforcement aide-de-camp messages being generated for this army.
function battle_army:suppress_reinforcement_adc() end

--- Changes the army's faction mid-battle.
---@param faction_key string faction key
function battle_army:change_faction(faction_key) end

--- Sets whether the army destruction morale effect can apply to this army or not.
---@param enable_effect boolean enable effect
function battle_army:enable_army_destruction_morale_effect(enable_effect) end

--- Instructs the army to quit the battle.
function battle_army:quit_battle() end

--- Highlights/flashes the deployment area related to this army.
---@param should_highlight boolean should highlight
function battle_army:highlight_deployment_areas(should_highlight) end

--- Instructs the army to use the specified army special ability. An optional position, bearing and width may be specified with the special ability but these are not always required.
---@param special_ability_key string Special ability key, from the army_special_abilities table.
---@param position battle_vector Position at which the ability is targeted, if applicable.
---@param bearing number Bearing in radians of special ability, if applicable.
---@param width number Width of special ability, if applicable.
function battle_army:use_special_ability(special_ability_key, position, bearing, width) end
