--- THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT MANUALLY.

---@class battle_manager
local battle_manager = {}

--- Creates a battle_manager object. The single parameter should be an battle code object, which can be created with empire_battle:new(). Only one battle_manager object may be created in a session - attempting to create a second just returns the first.
---@return battle_manager
function battle_manager:new() end

--- Prints a string to the debug output spool. The string is prepended with a timestamp.
---@param output string #output
function battle_manager:out(output) end

--- Directly access the timer_manager object the battle manager creates and stores internally. It shouldn't be necessary to do this too often, as the battle manager exposes its most useful functions.
---@return timer_manager
function battle_manager:get_tm() end

--- Retrieves a handle to a battle_ui_manager object from the battle manager. One is created if it hasn't been created before.
---@return battle_ui_manager
function battle_manager:get_battle_ui_manager() end

--- Returns the path to the battle script folder.
---@return string #path 
function battle_manager:get_battle_folder() end

--- Returns a vector position at the world origin.
---@return battle_vector #origin 
function battle_manager:get_origin() end

--- A wrapper for ui_component. Searches the UI heirarchy and returns a uicomponent object with the supplied name. This overrides the base ui_component function provided by the underlying battle object, which returns a component object (which must be converted to be a UIComponent before use).
---@return UIC
function battle_manager:ui_component() end

--- Returns true if any cutscene object is currently showing a cutscene.
---@return boolean #is cutscene running 
function battle_manager:is_any_cutscene_running() end

--- Queries the UI and returns true if any unit cards are selected.
---@return boolean #any unit selected 
function battle_manager:is_any_unit_selected() end

--- Queries the UI and returns true if all unit cards are selected.
---@return boolean #all units selected 
function battle_manager:are_all_units_selected() end

--- Returns the alliance number of the player's alliance.
---@return integer #alliance number 
function battle_manager:get_player_alliance_num() end

--- Returns the alliance number of the non-player alliance.
---@return integer #alliance number 
function battle_manager:get_non_player_alliance_num() end

--- Returns the local player's alliance object.
---@return battle_alliance #player alliance 
function battle_manager:get_player_alliance() end

--- Returns the alliance object of the local player's enemy.
---@return battle_alliance #enemy alliance 
function battle_manager:get_non_player_alliance() end

--- Returns true if the local player is the attacker in the battle.
---@return boolean #player is attacker 
function battle_manager:player_is_attacker() end

--- Returns the local player's army object.
---@return battle_army
function battle_manager:get_player_army() end

--- Returns the first army of the enemy alliance to the local player.
---@return battle_army #enemy army 
function battle_manager:get_first_non_player_army() end

--- Returns a random number. If no max value is supplied then the value returned is a float between 0 and 1. If a max value is supplied, then the value returned is an integer value from 1 to the max value. This is safe to use in multiplayer.
---@param max_value number? #optional, default value=nil max value
---@return random #number 
function battle_manager:random_number(max_value) end

--- Randomly sorts a numerically-indexed table. This is safe to use in multiplayer, but will destroy the supplied table. It is faster than battle_manager:random_sort_copy.<br />
--- Note that records in this table that are not arranged in an ascending numerical index will be lost.<br />
--- Note also that the supplied table is overwritten with the randomly-sorted table, which is also returned as a return value.
---@return table
function battle_manager:random_sort() end

--- Randomly sorts a numerically-indexed table. This is safe to use in multiplayer, and will preserve the original table, but it is marginally slower than battle_manager:random_sort.<br />
--- Note that records in the source table that are not arranged in an ascending numerical index will not be copied (they will not be deleted, however).
---@return table
function battle_manager:random_sort_copy() end

--- Packaged function to set up a scripted battle on startup, and register a function to be called when the deployment phase ends (i.e. when battle starts). setup_battle will suppress a variety of unit sounds and steal input focus until the combat phase begins.
---@param deployment_end_callback function #deployment end callback
function battle_manager:setup_battle(deployment_end_callback) end

--- Registers a function to be called when a specified phase change occurs. Phase change notifications are sent to the script by the game when the battle changes phases, from 'Deployment' to 'Deployed' and on to 'VictoryCountdown' and 'Complete'. The battle manager writes debug output whenever a phase change occurs, regardless of whether any callback has been registered for it.<br />
--- This wraps the underlying functionality provided by battle:register_battle_phase_handler. See that function's documentation for a list of phase change events that may be listened for.
---@param phase_change_name string #phase change name
---@param callback function #callback
function battle_manager:register_phase_change_callback(phase_change_name, callback) end

--- Registers a function to be called when a specified unit is selected by the player.
---@param subject_unit UNIT_SCRIPT_INTERFACE #subject unit
---@param callback function #callback
function battle_manager:register_unit_selection_callback(subject_unit, callback) end

--- Unregisters a function registered with battle_manager:register_unit_selection_callback.
---@param subject_unit UNIT_SCRIPT_INTERFACE #subject unit
function battle_manager:unregister_unit_selection_callback(subject_unit) end

--- Registers a function to be called when a command event is issued by the game. The function will be called with the command handler context supplied as a single argument, which can be queried for further information depending upon the command.<br />
--- This wraps the underlying functionality provided by battle:register_command_handler. See the documentation of that function for more information about what command events can be listened for, and what contextual information those events provide.
---@param command string #Command name to listen for.
---@param callback function #Callback to call when the command is triggered by the game.
---@param callback_name string? #optional, default value=nil Optional name by which this callback handler can be removed.
function battle_manager:register_command_handler_callback(command, callback, callback_name) end

--- Unregisters a callback function registered with battle_manager:register_command_handler_callback. The callback function is specified by the command name and callback name specified when setting the callback up.
---@param command_name string #command name
---@param callback_name string #callback name
function battle_manager:unregister_command_handler_callback(command_name, callback_name) end

--- Registers a function to be called when an input event is issued by the game. This wraps the underlying functionality provided by battle:register_input_handler. See the documentation of that function for more information about what input events can be listened for.
---@param input string #Input name to listen for.
---@param callback function #Callback to call when the input is triggered by the game.
---@param callback_name string? #optional, default value=nil Optional name by which this input handler can be removed.
function battle_manager:register_input_handler_callback(input, callback, callback_name) end

--- Unregisters a callback function registered with battle_manager:register_input_handler_callback. The callback function is specified by the input name and callback name specified when setting the callback up.
---@param command_name string #command name
---@param callback_name string #callback name
function battle_manager:unregister_input_handler_callback(command_name, callback_name) end

--- Steals the escape key if it wasn't stolen before, and registers a callback to be called if the player presses it. The callback entry must be registered with a unique string name, by which it may be cancelled later if desired.<br />
--- Multiple escape key callbacks may be registered at one time, although only the most recently-registered callback is notified when the ESC key is pressed. Once an ESC key callback is called it is removed from the list, and the next ESC key press causes the next most recent callback to be notified, and so-on.
---@param callback_name string #callback name
---@param callback function #callback
function battle_manager:steal_escape_key_with_callback(callback_name, callback) end

--- Cancels an escape key callback registered with battle_manager:steal_escape_key_with_callback by name.
---@param callback_name_to_cancel string #callback name to cancel
function battle_manager:release_escape_key_with_callback(callback_name_to_cancel) end

--- Establishes a function to be called when the battle enters VictoryCountdown phase i.e. someone has won. This function also sets the duration of the victory countdown to infinite, meaning the battle will never end until battle_manager:end_battle is called. This allows calling scripts to do things like set up an outro cutscene or play some advice that wouldn't fit into the standard victory countdown duration (10 seconds).
---@param callback_to_call function #callback to call
function battle_manager:setup_victory_callback(callback_to_call) end

--- Causes a battle to immediately end when it enters the VictoryCountdown phase, or to immediately end if it is already in that phase. This function is most commonly used to end a battle that has entered the VictoryCountdown phase after battle_manager:setup_victory_callback has been called.
function battle_manager:end_battle() end

--- Old-style battle-ending handlers. These can still be used but won't get called until the battle results screen is shown. Registers player victory and player defeat callbacks to be called at the end of the battle.
---@param player_victory_callback function #player victory callback
---@param player_defeat_callback function #player defeat callback
function battle_manager:register_results_callbacks(player_victory_callback, player_defeat_callback) end

--- Changes game speed from one value to another over a total time (note that this will be elongated by the slowing action) over a given number of steps. Note that the script engine only updates once every 1/10th of a second so specifying steps of less than this will have weird results. Speeds are specified as multiples of normal game speed, so a value of 2 would be twice normal speed, 0.5 would be half, and so on.
---@param start_game_speed number #start game speed
---@param target_game_speed number #target game speed
---@param duration_in_ms number #duration in ms
---@param steps number #steps
function battle_manager:slow_game_over_time(start_game_speed, target_game_speed, duration_in_ms, steps) end

--- Pauses the battle.
function battle_manager:pause() end

--- Exposes the callback function from the timer_manager object. Instructs the timer manager to call a supplied function after a supplied delay. A string name for the callback may also be supplied with which the callback may be later cancelled using battle_manager:remove_process.
---@param callback_to_call function #callback to call
---@param delay_in_ms number #delay in ms
---@param callback_name string? #optional, default value=nil callback name
function battle_manager:callback(callback_to_call, delay_in_ms, callback_name) end

--- Exposes the repeat_callback function from the timer_manager object. Instructs the timer manager to call a supplied function after a supplied delay, and then repeatedly after the same delay. A string name for the callback may also be supplied with which the callback may be later cancelled using battle_manager:remove_process.
---@param callback_to_call function #callback to call
---@param delay_in_ms number #delay in ms
---@param callback_name string? #optional, default value=nil callback name
function battle_manager:repeat_callback(callback_to_call, delay_in_ms, callback_name) end

--- Exposes the register_singleshot_timer function from the timer_manager object.
---@param function_name string #function name
---@param time_in_ms number #time in ms
function battle_manager:register_singleshot_timer(function_name, time_in_ms) end

--- Exposes the register_repeating_timer function from the timer_manager object.
---@param function_name string #function name
---@param time_in_ms number #time in ms
function battle_manager:register_repeating_timer(function_name, time_in_ms) end

--- Exposes the unregister_timer function from the timer_manager object.
---@param function_name string #function name
function battle_manager:unregister_timer(function_name) end

--- Establishes a new watch. A supplied condition function is repeated tested and, when it returns true, a supplied target function is called. A wait period between the condition being met and the target being called must also be specified. A name for the watch may optionally be specified to allow other scripts to cancel it.<br />
--- The condition must be a function that returns a value - when that value is true (or evaluates to true) then the watch condition is met. The watch then waits the supplied time offset, which is specified in ms as the second parameter, before calling the callback supplied in the third parameter.
---@param condition function #Condition. Must be a function that returns a value. When the returned value is true, or evaluates to true, then the watch condition is met.
---@param wait_time number #Time in ms that the watch waits once the condition is met before triggering the target callback
---@param target_callback function #Target callback
---@param watch_name string #Name for this watch process. Giving a watch a name allows it to be stopped/cancelled with battle_manager:remove_process.
function battle_manager:watch(condition, wait_time, target_callback, watch_name) end

--- Stops and removes any watch OR callback with the supplied name. Returns true if any were found, false otherwise.
---@param name string #name
---@return boolean #any removed 
function battle_manager:remove_process(name) end

--- Stops and removes any watch with the supplied name. Returns true if any were found, false otherwise. Best practice is to use remove_process instead of this.
---@param name string #name
---@return boolean #any removed 
function battle_manager:remove_process_from_watch_list(name) end

--- Debug command to dump the watch list to the console output spool.
function battle_manager:print_watch_list() end

--- Cancels all running watches and callbacks. It's highly recommend to not call this except for debug purposes (and rarely, even then).
function battle_manager:clear_watches_and_callbacks() end

--- By default the watch system performs load balancing, where it tries to stagger its running watches so they don't all process on the same tick. If this is causes problems for any reason it can be disabled with set_load_balancing. Supply a boolean parameter to enable or disable load balancing.
function battle_manager:set_load_balancing() end

--- Enqueues a line of advice for delivery to the player. If there is no other advice playing, or nothing is blocking the advisor system, then the advice gets delivered immediately. Otherwise, the supplied advice will be queued and shown at an appropriate time.<br />
--- The function must be supplied an advice key from the advice_levels/advice_threads tables as its first parameter, unless the advisor entry is set to be debug (see below).
---@param advice_key string #If the advice entry is set to be debug (see third parameter) the text supplied here will instead be shown directly in the advisor window (debug only)
---@param forced_duration number #Forced duration in ms. This is a period that this advice must play for before another item of advice is allowed to start. By default, items of advice will only remain queued while the active advice is actually audibly playing, but by setting a duration the active advice can be held on-screen for longer than the length of its associated soundfile (unless it is closed by the player). This is useful during development to hold advice on-screen when no soundfile yet exists, and also for tutorial scripts which often wish to ensure that an item of advice is shown on-screen for a certain duration.
---@param debug boolean #Sets whether the advice line is debug. If set to true, the text supplied as the first parameter is displayed in the advisor window as-is, without using it as a lookup key in the advice_levels table.
---@param start_callback function #Start callback. If a function is supplied here it is called when the advice is actually played.
---@param start_callback_wait number #Start callback wait period in ms. If a duration is specified it causes a delay between the advice being played and the start callback being called.
---@param condition function #Playback condition. If specified, it compels the advisor system to check this condition immediately before playing the advisor entry to decide whether to actually proceed. This must be supplied as a function block that returns a result. If this result evaluates to true, the advice is played.
function battle_manager:queue_advisor(advice_key, forced_duration, debug, start_callback, start_callback_wait, condition) end

--- Cancels any running advice, and clears any subsequent advice that may be queued.
---@param close_advisor boolean? #optional, default value=false Closes the advisor if it's open
---@param force_immediate_stop boolean? #optional, default value=false Forces immediate stop. By default the stopping action takes a short amount of time - the game seems happier with this. If set to true, this flag bypasses this behaviour. User beware.
function battle_manager:stop_advisor_queue(close_advisor, force_immediate_stop) end

--- Stops the advisor queue and prevents any more advice from being queued. The advice system will only subsequently restart if battle_manager:advice_resume is called.
function battle_manager:advice_cease() end

--- Allows advice to resume after battle_manager:advice_cease has been called.
function battle_manager:advice_resume() end

--- Establishes a listener which stops the advice system as soon as the battle results panel appears.
function battle_manager:stop_advice_on_battle_end() end

--- Sets whether the advisor system should close the advisor panel once an item of advice has finished playing. By default this is set to false, so use this function to turn this behaviour on.
---@param value boolean? #optional, default value=true value
function battle_manager:set_close_queue_advice(value) end

--- Returns true if any advice has played in this battle session
---@return boolean #advice has played 
function battle_manager:has_advice_played_this_battle() end

--- Modifies the advisor panel to show the progress/close button in the bottom right, and also to highlight this button with an animated ring around it. This setting will persist across subsequent items of advice in a battle session until modified again.
---@param show_button boolean? #optional, default value=false Show progress/close button.
---@param show_highlight boolean? #optional, default value=false Show highlight on close button.
function battle_manager:modify_advice(show_button, show_highlight) end

--- Calls a supplied callback when the advisor panel is closed for any reason.
---@param callback_to_call function #Callback to call.
---@param delay number? #optional, default value=0 Delay in ms after the adisor closes before calling the callback.
---@param highlight_on_finish boolean? #optional, default value=false Highlight the advisor close button upon finishing the currently-playing advice. This is useful for script that knows the advisor is playing, wants to highlight the close button when it finishes and be notified of when the player closes the advisor in any case.
function battle_manager:progress_on_advice_dismissed(callback_to_call, delay, highlight_on_finish) end

--- Cancels a running battle_manager:progress_on_advice_dismissed process.
function battle_manager:cancel_progress_on_advice_dismissed() end

--- Causes a battle_manager:progress_on_advice_dismissed process that is listening for the advice to finish so that it can highlight the close button (i.e. the third parameter was set to true) to cancel this listener.
function battle_manager:progress_on_advice_dismissed_immediate_highlight() end

--- Calls a supplied callback when the advisor has stopped playing an audible sound.
---@param callback_to_call function #Callback to call.
---@param delay number? #optional, default value=0 Delay in ms after the adisor stops before calling the callback.
---@param playtime number? #optional, default value=5000 Playing time for the advice item. This sets a time after which battle_manager:progress_on_advice_finished will begin to actively poll whether the advice is still playing, as well as listening for the finish event. This is useful as it ensure this function works even during development when the advisor sound files have not yet been recorded.
function battle_manager:progress_on_advice_finished(callback_to_call, delay, playtime) end

--- Cancels a running battle_manager:progress_on_advice_finished process.
function battle_manager:cancel_progress_on_advice_finished() end

--- Pass-through function for objectives_manager:set_objective on the objectives manager. Sets up a scripted objective for the player, which appears in the scripted objectives panel. This objective can then be updated, removed, or marked as completed or failed by the script at a later time.<br />
--- A key to the scripted_objectives table must be supplied with set_objective, and optionally one or two numeric parameters to show some running count related to the objective. To update these parameter values later, set_objective may be re-called with the same objective key and updated values.
---@param objective_key string #Objective key, from the scripted_objectives table.
---@param param_a number? #optional, default value=nil] number param a, First numeric objective parameter. If set, the objective will be presented to the player in the form [objective text]: [param a First numeric objective parameter. If set, the objective will be presented to the player in the form [objective text]: [param a]. Useful for showing a running count of something related to the objective.
---@param param_b number? #optional, default value=nil] number param b, Second numeric objective parameter. A value for the first must be set if this is used. If set, the objective will be presented to the player in the form [objective text]: [param a] / [param b Second numeric objective parameter. A value for the first must be set if this is used. If set, the objective will be presented to the player in the form [objective text]: [param a] / [param b]. Useful for showing a running count of something related to the objective.
function battle_manager:set_objective(objective_key, param_a, param_b) end

--- Pass-through function for objectives_manager:complete_objective on the objectives manager. Marks a scripted objective as completed for the player to see. Note that it will remain on the scripted objectives panel until removed with battle_manager:remove_objective.<br />
--- Note also that is possible to mark an objective as complete before it has been registered with battle_manager:set_objective - in this case, it is marked as complete as soon as battle_manager:set_objective is called.
---@param objective_key string #Objective key, from the scripted_objectives table.
function battle_manager:complete_objective(objective_key) end

--- Pass-through function for objectives_manager:fail_objective on the objectives manager. Marks a scripted objective as failed for the player to see. Note that it will remain on the scripted objectives panel until removed with battle_manager:remove_objective.
---@param objective_key string #Objective key, from the scripted_objectives table.
function battle_manager:fail_objective(objective_key) end

--- Pass-through function for objectives_manager:remove_objective on the objectives manager. Removes a scripted objective from the scripted objectives panel.
---@param objective_key string #Objective key, from the scripted_objectives table.
function battle_manager:remove_objective(objective_key) end

--- Pass-through function for objectives_manager:activate_objective_chain. Starts a new objective chain - see the documentation on the objectives_manager page for more details.
---@param chain_name string #Objective chain name.
---@param objective_key string #Key of initial objective, from the scripted_objectives table.
---@param number_param_a number? #optional, default value=nil First numeric parameter - see the documentation for battle_manager:set_objective for more details
---@param number_param_b number? #optional, default value=nil Second numeric parameter - see the documentation for battle_manager:set_objective for more details
function battle_manager:activate_objective_chain(chain_name, objective_key, number_param_a, number_param_b) end

--- Pass-through function for objectives_manager:update_objective_chain. Updates an existing objective chain - see the documentation on the objectives_manager page for more details.
---@param chain_name string #Objective chain name.
---@param objective_key string #Key of initial objective, from the scripted_objectives table.
---@param number_param_a number? #optional, default value=nil First numeric parameter - see the documentation for battle_manager:set_objective for more details
---@param number_param_b number? #optional, default value=nil Second numeric parameter - see the documentation for battle_manager:set_objective for more details
function battle_manager:update_objective_chain(chain_name, objective_key, number_param_a, number_param_b) end

--- Pass-through function for objectives_manager:end_objective_chain. Ends an existing objective chain - see the documentation on the objectives_manager page for more details.
---@param chain_name string #Objective chain name.
function battle_manager:end_objective_chain(chain_name) end

--- Pass-through function for objectives_manager:reset_objective_chain. Resets an objective chain so that it may be called again - see the documentation on the objectives_manager page for more details.
---@param chain_name string #Objective chain name.
function battle_manager:reset_objective_chain(chain_name) end

--- Sets up a locatable objective in battle. This will appear in the scripted objectives list alongside a zoom-to button which, when clicked, will zoom the camera to a location on the battlefield. The key of the objective text, as well as the camera position/target and zoom duration must all be supplied. The button visibility, on-click listener, and camera movements are all handled in script (which means the camera movement doesn't work when paused..)
---@param objective_key string #Objective key, from the scripted_objectives table.
---@param camera_position battle_vector #Final camera position.
---@param camera_target battle_vector #Final camera target.
---@param zoom_duration number #Duration of camera movement in seconds.
function battle_manager:set_locatable_objective(objective_key, camera_position, camera_target, zoom_duration) end

--- Sets up a locatable objective in battle. This will appear in the scripted objectives list alongside a zoom-to button which, when clicked, will zoom the camera to a location on the battlefield. Whereas battle_manager:set_locatable_objective requires static camera position/targets to be supplied, this function takes a function argument which, when called, should return a battle_vector camera position and a battle_vector camera target. This allows the camera position to be generated at runtime, to follow a unit for example.
---@param objective_key string #Objective key, from the scripted_objectives table.
---@param camera_position_generator function #Camera position generator function. When called, this should return two battle_vector values that specify the camera position and target to move to.
---@param zoom_duration number #Duration of camera movement in seconds.
function battle_manager:set_locatable_objective_callback(objective_key, camera_position_generator, zoom_duration) end

--- Pass-through function for infotext_manager:add_infotext. Adds one or more lines of infotext to the infotext panel - see the documentation on the infotext_manager page for more details.
---@param first_param any #Can be a string key from the advice_info_texts table, or a number specifying an initial delay in ms after the panel animates onscreen and the first infotext item is shown.
---@param ... any #Additional infotext strings to be shown. add_infotext fades each of them on to the infotext panel in a visually-pleasing sequence.
function battle_manager:add_infotext(first_param, ...) end

--- Pass-through function for infotext_manager:remove_infotext. Removes a line of infotext from the infotext panel.
---@param infotext_key string #infotext key
function battle_manager:remove_infotext(infotext_key) end

--- Pass-through function for infotext_manager:clear_infotext. Clears the infotext panel.
function battle_manager:clear_infotext() end

--- Shows a cutscene subtitle on-screen.
---@param subtitle_key string #subtitle key
---@param full_key_supplied boolean? #optional, default value=false Full localised key supplied. If false, or if no value supplied, the script assumes that the key is from the scripted_subtitles table and pads the supplied key out accordingly. If the key has been supplied in the full localisation format (i.e. [table]_[field_of_text]_[key_from_table]), set this to true.
---@param force_subtitle_on boolean? #optional, default value=false Forces the subtitle to display, overriding the user's preferences.
function battle_manager:show_subtitle(subtitle_key, full_key_supplied, force_subtitle_on) end

--- Hides any currently-shown subtitle.
function battle_manager:hide_subtitles() end

--- Enqueues a help message for showing on-screen.
---@param key string #Help message key, from the scripted_objectives table.
---@param duration number? #optional, default value=5000 Duration that the message will persist on-screen for in ms. If this is specified then a fade time must also be set.
---@param fade_time number? #optional, default value=2000 Time that the message will take to fade on/fade off in ms. If this is specified then a duration must also be set.
---@param high_priority boolean? #optional, default value=false Set this to true to set this message to high priority. High priority messages are bumped to the top of the queue.
---@param play_after_battle_victory boolean? #optional, default value=false By default, help messages won't play after the battle has been won. Set this to true to allow this message to play after this point.
---@param callback function? #optional, default value=nil Callback to call when the message actually starts to show on-screen.
function battle_manager:queue_help_message(key, duration, fade_time, high_priority, play_after_battle_victory, callback) end

--- Allows script to prevents player movement of the camera without stealing input - other game interactions are still permitted. Supply false as an argument to disable camera movement.
---@param enable_movement boolean? #optional, default value=true enable movement
function battle_manager:enable_camera_movement(enable_movement) end

--- Caches the current position/target of the camera for later retrieval.
function battle_manager:cache_camera() end

--- Gets the cached position of the camera. This must be called after the position has been cached with battle_manager:cache_camera (else it will return false).
function battle_manager:get_cached_camera_pos() end

--- Gets the cached target of the camera. This must be called after the position has been cached with battle_manager:cache_camera (else it will return false).
function battle_manager:get_cached_camera_targ() end

--- Starts the camera movement tracker. Only tutorial scripts which need to query camera tracker information need to do this.
function battle_manager:start_camera_movement_tracker() end

--- Stops the camera movement tracker.
function battle_manager:stop_camera_movement_tracker() end

--- Gets the difference in camera altitude between now and when the tracker was started. The returned value is absolute (always positive).
---@return number #difference in m 
function battle_manager:get_camera_altitude_change() end

--- Gets the total distance the camera has travelled between now and when the tracker was started. This distance is not exact, but gives the calling script an indication of how much the player is moving the camera.
---@return number #distance in m 
function battle_manager:get_camera_distance_travelled() end

--- Shows/hides the battle UI from script.
---@param should_show boolean? #optional, default value=true should show
function battle_manager:show_ui(should_show) end

--- Shows/hides the army panel.
---@param should_show boolean? #optional, default value=true Should show.
---@param immediate boolean? #optional, default value=false Hide immediately. If the first parameter is false and this is true, the panel will not animate offscreen but will instead immediately disappear.
function battle_manager:show_army(should_show, immediate) end

--- Shows/hides the winds of magic panel
---@param should_show boolean? #optional, default value=true Should show.
---@param immediate boolean? #optional, default value=false Hide immediately. If the first parameter is false and this is true, the panel will not animate offscreen but will instead immediately disappear.
function battle_manager:show_winds_of_magic_panel(should_show, immediate) end

--- Shows/hides the unit portrait panel.
---@param should_show boolean? #optional, default value=true Should show.
---@param immediate boolean? #optional, default value=false Hide immediately. If the first parameter is false and this is true, the panel will not animate offscreen but will instead immediately disappear.
function battle_manager:show_portrait_panel(should_show, immediate) end

--- Shows/hides the top bar on the battle interface.
---@param should_show boolean? #optional, default value=true Should show.
---@param immediate boolean? #optional, default value=false Hide immediately. If the first parameter is false and this is true, the panel will not animate offscreen but will instead immediately disappear.
function battle_manager:show_top_bar(should_show, immediate) end

--- Shows/hides the radar.
---@param should_show boolean? #optional, default value=true Should show.
---@param immediate boolean? #optional, default value=false Hide immediately. If the first parameter is false and this is true, the panel will not animate offscreen but will instead immediately disappear.
function battle_manager:show_radar_frame(should_show, immediate) end

--- Shows/hides the start battle button.
---@param should_show boolean? #optional, default value=true Should show.
---@param is_multiplayer boolean? #optional, default value=false Set this to true if this is a multiplayer battle.
function battle_manager:show_start_battle_button(should_show, is_multiplayer) end

--- Shows/hides the ui options rollout panel.
---@param should_show boolean? #optional, default value=true should show
function battle_manager:show_ui_options_panel(should_show) end

--- Enables/disables the spell browser button on the battle interface. A disabled button will still be visible, but greyed-out.
---@param should_enable boolean? #optional, default value=true should enable
function battle_manager:enable_spell_browser_button(should_enable) end

--- Enables/disables UI hiding. With UI hiding disabled the player will not be able to hide the UI by pressing K or alt-K. This function does not prevent the script from being able to hide or show the UI.
---@param should_enable boolean? #optional, default value=true should enable
function battle_manager:enable_ui_hiding(should_enable) end

--- Returns false if UI hiding has been disabled with battle_manager:enable_ui_hiding, otherwise true.
function battle_manager:is_ui_hiding_enabled() end

--- Starts the engagement monitor. This must be called before the "Deployed" phase change occurs (i.e. before the end of deployment).
function battle_manager:start_engagement_monitor() end

--- Returns the cached distance between the two alliances. battle_manager:start_engagement_monitor must have been called before the battle started for this to work.
---@return number #distance 
function battle_manager:get_distance_between_forces() end

--- Returns the number of units in the player's alliance engaged in melee. battle_manager:start_engagement_monitor must have been called before the battle started for this to work.
---@return number #engaged 
function battle_manager:get_num_units_engaged() end

--- Returns the proportion of units in the player's alliance engaged in melee. This proportion will be a unary value (0 - 1). battle_manager:start_engagement_monitor must have been called before the battle started for this to work.
---@return number #proportion engaged 
function battle_manager:get_proportion_engaged() end

--- Returns the number of units in the player's alliance under missile fire. battle_manager:start_engagement_monitor must have been called before the battle started for this to work.
---@return number #under fire 
function battle_manager:get_num_units_under_fire() end

--- Returns the proportion of units in the player's alliance engaged in melee. This proportion will be a unary value (0 - 1). battle_manager:start_engagement_monitor must have been called before the battle started for this to work.
---@return number #proportion engaged 
function battle_manager:get_proportion_under_fire() end

--- Returns the average altitude of the player's army in m.
---@return number #average altitude 
function battle_manager:get_player_army_altitude() end

--- Returns the average altitude of the enemy army in m.
---@return number #average altitude 
function battle_manager:get_enemy_army_altitude() end

--- Stops the engagement monitor.
function battle_manager:stop_engagement_monitor() end

--- Starts a composite scene with the supplied key. If an optional group name is set then this composite scene will not play if another from the same group is active, but will instead be enqueued. When a composite scene in a group stops and a second in the same group is enqueued, then that second scene will begin to play automatically.
---@param key string #Composite scene key.
---@param group_name string? #optional, default value=false Composite group name.
---@param delay number? #optional, default value=false Delay in milliseconds to wait before starting if this composite scene becomes enqueued behind another (allowing a minimum time separation between composite scenes of the same group to be specified). This has no effect if no group name is specified.
function battle_manager:start_terrain_composite_scene(key, group_name, delay) end

--- Stops a composite scene with the supplied key. If this composite scene was specified as belonging to a group when it was started, and other composite scenes in that group are enquened, then the next one will begin to play automatically (after an optional delay).
---@param key string #Composite scene key.
function battle_manager:stop_terrain_composite_scene(key) end
