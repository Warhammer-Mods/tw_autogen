--- Handmade file while the autogen'd one is buggy.
--- TODO autogen this.

--- Prints one or more supplied values to the standard output. In Total War games, the standard output is the game console, and optionally also a text file. Non-string values passed to the function are cast to string before printing.
---@param ... any #values to print
function print(...) end

--- Returns the type of a specified value as a string.
---@param variable any #variable
---@return string #type 
function type(variable) end

--- Returns the specified value cast to a string. The specified value is unaffected.
---@param variable any #variable
---@return string #variable cast to string 
function tostring(variable) end

--- Returns the specified string value cast to a number. This only works for string values that contain numeric characters (e.g. "65"). If the supplied value is a string that does not contain numeric characters, or is any other value other than a number then nil is returned.
---@param variable any #variable
---@return number #variable cast to number 
function tonumber(variable) end

--- Returns an executable function created from a string. This string may be constructed manually, or generated by another function such as string.dump. When the returned function is executed the lua script contained within the specified string is run.<br />
--- Use this function sparingly. See external documentation for more information.
---@param lua_string string #lua string
---@return function #lua function 
function loadstring(lua_string) end

---@type stringlib
local string = {}

--- Returns the numerical code corresponding to the characters of a specified portion of the string. The portion of the string is specified by index positions of the start and end characters.
---@param first_char number? #optional, default value=1 Position of first character in the substring. If this is not a valid character index for this string then nil is returned.
---@param last_char number? #optional, default value=1 Position of last character in the substring. If the first character position is specified and this is not, then this is set to the value of the first character position (so that only one character is returned).
---@return ... number
function string.byte(first_char, last_char) end

--- Returns a string constructed from the specified numeric character values. Number character values can be obtained with string.byte.
---@param ... any #Vararg of number character values.
function string.char(...) end

--- Returns a string representation of a supplied function, which can later be passed to the loadstring function to be reconstituted as an executable function.
---@param fun function #function
---@return string #string representation 
function string.dump(fun) end

--- Returns true if the subject string ends with the supplied substring, or false othewise.
---@param subject_string string #subject string
---@param substring string #substring
function string.ends_with(subject_string, substring) end

--- Returns the position of the first occurrence of a supplied substring in the subject string. If the supplied substring is found within the subject string then the start and end character positions of the substring are returned. nil is returned if the substring is not found.<br />
--- This implementation of len is provided by our game code to support utf8 strings. It does not support pattern matching - see string.find_lua for the original language implementation which does.
---@param string string #Subject string.
---@param substring string #String pattern to search for.
---@param start_index number? #optional, default value=1 Position of character at which to start the search. Supply a negative number to specify a character from the end of the string, counting back.
---@return number #first character index 
---@return number #last character index 
function string.find(string, substring, start_index) end

--- Returns the position of the first occurrence of a supplied substring in the subject string. If the supplied substring is found within the subject string then the start and end character positions of the substring are returned. nil is returned if the substring is not found.<br />
--- This is the original lua language implementation of len, which does not support utf8 strings but which does support pattern matching. See the lua wiki for more information about lua patterns.
---@param string string #Subject string.
---@param substring string #String pattern to search for.
---@param start_index number? #optional, default value=1 Position of character at which to start the search. Supply a negative number to specify a character from the end of the string, counting back.
---@param disable_pattern_matching boolean? #optional, default value=false Disables pattern matching if set to true.
---@return number #first character index 
---@return number #last character index 
function string.find_lua(string, substring, start_index, disable_pattern_matching) end

--- Returns a formatted string from the formatting string and then arguments provided, in a similar style to the C function printf. The formatting string may contain the following special characters:<br />
--- CharacterData TypeDescription<br />
--- %cnumber (character code)The supplied numerical character code (see string.byte) will be converted into its string representation.
--- %dnumber (integer)The supplied integer, to be preceded by up to up to seven leading zeroes, the number of which may optionally be specified alongside the special character e.g. %04d. If no number is specified then the integer is included in the returned string as it was given.
--- %enumberThe supplied number will be formatted as an exponent, with the output in lower-case.
--- %EnumberThe supplied number will be formatted as an exponent, with the output in upper-case.
--- %fnumberThe specified number will be formated as a floating-point value. A specific format for the number may optionally be specified alongside the special character e.g. %4.1f would specify that the floating point number should be formatted with four digits preceding the decimal point and one digit following it.
--- %gnumberThe specified number will be formated as a compact floating-point value, or as an exponent (if too many digits) in lower-case.
--- %GnumberThe specified number will be formated as a compact floating-point value, or as an exponent (if too many digits) in upper-case.
--- %inumber (integer)The supplied integer value will be formatted as a signed integer.
--- %onumber (integer)The supplied integer value will be formatted as an octal value.
--- %qstringThe supplied string will be enclosed in strings (as a quotation) when returned.
--- %sstringA string value.
--- %unumber (integer)The supplied value will be formatted as an unsigned integer.
--- %xnumber (integer)The supplied value will be formatted as a hexadecimal integer in lower-case.
--- %Xnumber (integer)The supplied value will be formatted as a hexadecimal integer in upper-case.
--- The function will throw an error if it's unable to convert the number specified into an integer value (should one be expected).
---@param container_string string #String containing special characters to insert values into.
---@param ... any #One or more values to insert into the container string, in the order that the special characters are found.
---@return string #result 
function string.format(container_string, ...) end

--- Returns a pattern-finding iterator. More information about iterators and lua string patterns may be found externally - see String Patterns.
---@param subject_string string #subject string
---@param pattern string #pattern
---@return function #Iterator
function string.gmatch(subject_string, pattern) end

--- This function takes a subject string, a pattern string and a replacement string, and performs a search based on the pattern string within the subject string. Should any parts of the pattern match, those parts of the subject string are replaced with the replacement string. The resulting string is then returned. An optional count argument may also be specified to limit the number of pattern replacements that may be performed.
---@param subject string #Subject string.
---@param pattern string #Pattern string. More information about lua patterns may be found here: String Patterns
---@param replacement string #Replacement string.
---@param count number? #optional, default value=nil Maximum number of times the replacement can be performed. If left unset, then no maximum is applied.
---@return string #result 
function string.gsub(subject, pattern, replacement, count) end

--- Returns the number of characters in the supplied string. This implementation of len is provided by our game code, see string.len_lua for the original language implementation.
---@param input string #input
---@return number #length 
function string.len(input) end

--- Returns the number of characters in the supplied string. This is the original lua language implementation of len, which does not support utf8 strings.
---@param input string #input
---@return number #length 
function string.len_lua(input) end

--- Returns the supplied string, converted to lowercase.
---@param input string #input
---@return string #converted string 
function string.lower(input) end

--- Returns a substring of the supplied string, by a supplied pattern. An optional index may also be used to specify a character at which the search should be started.<br />
--- More information about patterns may be found here: String Patterns.
---@param subject string #Subject string to search.
---@param pattern string #Search pattern.
---@param start_character number? #optional, default value=1 Start character within the subject string.
---@return string #matching string 
function string.match(subject, pattern, start_character) end

--- Generates and returns a string which is a supplied number of copies of the supplied string, all concatenated together.
---@param source string #source
---@param count number #count
---@return string #result 
function string.rep(source, count) end

--- Returns the supplied string with the character order reversed.
---@param input string #input
---@return string #reversed string 
function string.reverse(input) end

--- Returns true if the subject string starts with the supplied substring, or false othewise.
---@param subject_string string #subject string
---@param substring string #substring
function string.starts_with(subject_string, substring) end

--- Returns a section of the supplied string, specified by start and (optionally) end character positions. The substring will include the characters specified by the start and end positions.<br />
--- This implementation of sub is provided by our game code, see string.sub_lua for the original language implementation.
---@param input string #Subject string.
---@param start_index number #Position of the starting character of the substring. If a negative number is specified then the function counts back from the end of the string.
---@param end_index number? #optional, default value=nil Position of the end character of the desired substring. If omitted, then the end of the supplied string is used as the end of the substring. If a negative number is specified then the function counts back from the end of the string to find this character.
function string.sub(input, start_index, end_index) end

--- Returns a section of the supplied string, specified by start and (optionally) end character positions. The substring will include the characters specified by the start and end positions.<br />
--- This is the original lua language implementation of sub, which does not support utf8 strings.
---@param input string #Subject string.
---@param start_index number #Position of the starting character of the substring. If a negative number is specified then the function counts back from the end of the string.
---@param end_index number? #optional, default value=nil Position of the end character of the desired substring. If omitted, then the end of the supplied string is used as the end of the substring. If a negative number is specified then the function counts back from the end of the string to find this character.
function string.sub_lua(input, start_index, end_index) end

--- Returns the supplied string, converted to uppercase.
---@param input string #input
---@return string #converted string 
function string.upper(input) end

---@type tablelib
local table = {}

--- Concatenates the values in the supplied table into a string, with optional separator characters, and returns that string. This can be a memory-efficient way of concatenating large amounts of strings together.
---@param table table #Table to concatenate.
---@param separator string? #optional, default value="" Separator string to insert between elements from the table.
---@param start_element number? #optional, default value=1 Table element at which to start concatenating.
---@param end_element number? #optional, default value=&lt;table_size&gt; Table element at which to finish concatenating.
function table.concat(table, separator, start_element, end_element) end

--- Inserts a value into the supplied table. The index at which to insert the value may optionally be specified - note that this can change the sequence of arguments.<br />
--- If no position argument is specified then the first available integer key in ascending order is chosen, starting from 1.
---@param tab table #Table to insert element in to.
---@param position number? #optional, default value=&lt;table_size&gt; Position at which to insert value. Note that this may be omitted, in which case the value to insert should be specified as the second argument. In this case the first available integer key is chosen, ascending from 1.
---@param value any #Value to insert. If a third argument is omitted, the second is taken as the value to insert.
function table.insert(tab, position, value) end

--- Returns the largest positive numeric index within the supplied table at which a value is assigned. Unlike the # operator, this will not stop counting if a gap in the integer sequence is found.
---@param table table #table
---@return number #highest index 
function table.maxn(table) end

--- Removes the element from the supplied table at the supplied numeric index.
---@param table table #Table.
---@param position number? #optional, default value=&lt;table_size&gt; Position within table of element to remove.
function table.remove(table, position) end

--- Sorts the elements in the supplied table into a new order. A comparison function may be supplied, which should take two table elements as arguments and return true if the first of these elements should appear in the final sorted order before the second, or false if the opposite is desired. The table is sorted into ascending numerical order by default, which is the equivalent of supplying the sort function function(a, b) return a < b end.
---@param table table #Table to sort.
---@param comparison function? #optional, default value=&lt;ascending_sort_order&gt; Comparison function.
function table.sort(table, comparison) end

--- Converts a table into a string representation of that table for debug output. Note that this function is not provided with lua but is provided by Total War's script libraries.
---@param table table #Subject table.
---@param for_campaign_savegame boolean #Set to true</code if the string is intended for saving into a campaign savegame. This discards values that are not boolean, number, strings or tables.
---@param max_depth number? #optional, default value=3 Maximum depth. This is the maximum depth of tables-within-tables to which the function will descend. Supply -1 to set no maximum depth, which makes an infinite loop a possibility.
---@param tab_level number? #optional, default value=0 Starting tab level. This number of tabs will be prepended to the start of each new line in the output.
---@return string #table to string 
function table.tostring(table, for_campaign_savegame, max_depth, tab_level) end

--- Reports if the supplied table contains the supplied value. If the table does contain the supplied value, the corresponding key at which it may be found is returned, otherwise false is returned.
---@param table table #table
---@param value any #value
---@return any #key corresponding to value 
function table.contains(table, value) end

--- Returns whether the supplied table is empty.
---@param table table #Subject table.
---@return boolean #is empty 
function table.is_empty(table) end

--- Returns a deep copy of the supplied table. All subtables are copied. Metatables are not copied. Cyclical references are preserved.
---@param table table #Subject table
---@return table #copy 
function table.copy(table) end

--- Returns the memory address portion of the result of calling tostring() with a table argument. The function will fail if the supplied table has a metatable that's write-protected.<br />
--- If the leave punctuation flag is set then the memory address is supplied back still with its leading colon and space characters.
---@param object table #object
---@param leave_punctuation boolean? #optional, default value=false leave punctuation
---@return string #address string 
function table.mem_address(object, leave_punctuation) end

--- Returns another table containing all records in the supplied indexed table, except with the values set to keys. The values in the returned table will be true for all records.
---@param indexed_table table #indexed table
---@return table #lookup table 
function table.indexed_to_lookup(indexed_table) end

---@type mathlib
local math = {}

--- Returns the absolute of the supplied value, converting it to a positive value if negative.
---@param value number #value
---@return number #absolute value 
function math.abs(value) end

--- Returns the arc cosine of the supplied value, in radians. The supplied value should be between -1 and 1.
---@param value number #value
---@return number #acos value in radians 
function math.acos(value) end

--- Returns the arc sine of the supplied value, in radians. The supplied value should be between -1 and 1.
---@param value number #value
---@return number #asin value in radians 
function math.asin(value) end

--- Returns the arc tangent of the supplied value, in radians.
---@param value number #value
---@return number #atan value in radians 
---@return number #atan value in radians 
function math.atan(value) end

--- Returns the smallest integer that is larger than or equal to the supplied value.
---@param value number #value
---@return number #ceil value 
function math.ceil(value) end

--- Returns the cosine of the supplied radian value.
---@param value number #value
---@return number #cosine value 
function math.cos(value) end

--- Returns the hyperbolic cosine of the supplied value.
---@param value number #value
---@return number #hyperbolic cosine value 
function math.cosh(value) end

--- Converts the supplied radian value into an angle in degrees. See also math.rad.
---@param radian_value number #radian value
---@return number #value in degrees 
function math.deg(radian_value) end

--- Returns the numerical constant e to the power of the supplied value. Supply a value of 1 to just return e.
---@param exponent number #exponent
---@return number
function math.exp(exponent) end

--- Returns the largest integer that is smaller than or equal to the supplied value.
---@param value number #value
---@return number #floor value 
function math.floor(value) end

--- Returns remainder of the division of the first supplied value by the second supplied value.
---@param dividend number #dividend
---@param divisor number #divisor
---@return number #floor value 
function math.fmod(dividend, divisor) end

--- Returns the values of m and exp in the expression x = m * 2 ^ exp, where x is the value supplied to the function. exp is an integer and the absolute value of the mantissa m is in the range 0.5 - 1 (or zero when x is zero).
---@param x_value number #x value
---@return number #mantissa m value 
---@return number #exponent e value 
function math.frexp(x_value) end

--- Returns m * 2 ^ exp, where the mantissa m and exponent exp are values supplied to the function. exp should be an integer value.
---@param m number #m
---@param exp number #exp
---@return number
function math.ldexp(m, exp) end

--- Returns the natural logarithm of the supplied value.
---@param value number #value
---@return number #log value 
---@return number #log value 
function math.log(value) end

--- Returns the maximum numeric value amongst the arguments given.
---@param ... any #Varargs of number values
---@return number #max value 
function math.max(...) end

--- Returns the minimum numeric value amongst the arguments given.
---@param ... any #Varargs of number values
---@return number #min value 
function math.min(...) end

--- Returns the integral part of the supplied value and the fractional part of the supplied value.
---@param input_value number #input value
---@return number #integral value 
---@return number #fractional value 
function math.modf(input_value) end

--- Scales a supplied value to between supplied minimum and maximum values.
---@param value number #value
---@param minimum number? #optional, default value=0 minimum
---@param maximum number? #optional, default value=1 maximum
---@return number #normalized value 
function math.normalize(value, minimum, maximum) end

--- Returns the first supplied number value to the power of the second supplied number value.
---@param x number #x
---@param y number #y
---@return number
function math.pow(x, y) end

--- Converts the supplied angle in degrees into an angle in radians. See also math.deg.
---@param degree_value number #degree value
---@return number #value in radians 
function math.rad(degree_value) end

--- Provides an interface to the pseudo-random number generator provided by ANSI C. This function returns a random number between two optionally-supplied limits. If no arguments are supplied, those limits are 0 and 1. If one argument a is supplied, those limits are 1 and a. If two arguments a and b are supplied then those limits are a and b.<br />
--- If no arguments are supplied the returned value is real, whereas if any arguments are supplied the returned value is an integer.<br />
--- Note that use of this function is discouraged, as it will generate different results on different clients in a multiplayer game. Acting upon the result of this function in multiplayer scripts will likely cause desyncs.
---@param first_limit number? #optional, default value=nil first limit
---@param second_limit number? #optional, default value=nil second limit
---@return number #random number 
function math.random(first_limit, second_limit) end

--- Sets the supplied value as the seed for the random number system.
---@param seed number #seed
function math.randomseed(seed) end

--- Returns the sine of the supplied radian value.
---@param value number #value
---@return number #sine value 
function math.sin(value) end

--- Returns the hyperbolic sine of the supplied value.
---@param value number #value
---@return number #hyperbolic sine value 
function math.sinh(value) end

--- Returns the square root of the supplied value.
---@param value number #value
---@return number #square root value 
function math.sqrt(value) end

--- Returns the tangent of the supplied radian value.
---@param value number #value
---@return number #tan value 
function math.tan(value) end

--- Returns the hyperbolic tangent of the supplied value.
---@param value number #value
---@return number #hyperbolic tan value 
function math.tanh(value) end
